乞丐版mybatis
1.启动时扫描base包下的所有mybatis配置文件 ok
2.解析配置文件，将对应的sql单元(statement)注册进configuration ok
3.当客户端调用时，从sqlSessionFactory中获取一个sqlSession,指定对应的sql单元(statement)和对应的参数
4.解析sql单元(statement)，将参数转换成具体的sql语句，调用jdbc接口，和数据库交互
5.根据jdbc响应的结果，将其组装成statement中对应的resultType(先不支持resultMap 0.0)返回给客户端

Configuration
MappedStatement

为什么mybatis需要抽象 Executor？
Executor默认的是simple，还存在batch、reuse等不同处理方式的executor

为什么mybatis需要抽象 ResultSetHandler？
resultType/resultMap等需要不同的处理逻辑来对jdbc的结果集进行对象映射

为什么mybatis需要抽象 StatementHandler？
SimpleStatementHandler 处理简单sql
PreparedStatementHandler 处理预处理sql
CallableStatementHandler 处理存储过程
RoutingStatementHandler 根据MappedStatement类型，使用策略模式进行StatementHandler路由

为什么mybatis需要抽象 SqlSessionFactory？
因为可以以不同的方式 初始化mybatis，配置文件/文件流/环境变量等等

1.sqlSessionFactoryBuilder 支持多种方式初始化mybatis配置 ok
2.解析sqlStatement中的子标签语句，实现动态传参 <where>、<set>、<if>等等(加强版 forEach)
3.resultMap解析结果集映射(加强版 嵌套映射 collection、association等)
4.提供事务，批处理执行方式
5.增加拦截器接口，并且自定义一个分页查询的插件

当前目标
动态sql解析
1.初始化时，sqlStatement解析内部子标签，判断是纯文本sql还是动态sql
    动态sql对内部子标签进行解析，递归生成对应的sqlNode节点
2.执行sql前，通过传入的参数context和子标签进行结合，使用访问者模式进行递归的解析。
    涉及到if的表达式判断，使用ognl表达式解析，判断真假
3.todo forEach由于难度更大，作为可选项

sqlNode在解析mapper-xml，构造MappedStatement时就已经解析完毕
==> XMLMapperBuilder.buildStatementFromContext 方法
mybatis各种类型动态sql节点：
1.文本节点
StaticTextSqlNode(纯文本，无#{}占位符)
TextSqlNode(纯文本，存在#{}占位符)

2.动态sql
TrimSqlNode 空语句，用于删除sql前后缀
IfSqlNode if表达式判断是否包含内部sql
ChooseSqlNode choose表达式判断是否包含对应分支的内部sql
SetSqlNode(TrimSqlNode子类) set用于sql中set语句，remove掉多余的','
WhereSqlNode(TrimSqlNode子类)  where用于sql中where语句，remove掉多余的'and'
ForEachSqlNode 遍历Collection，拼接对应的sql

3.绑定变量节点
ValDeclSqlNode 在动态sql的解析过程中在context中绑定对应的k/v键值对

4.综合，父类节点
MixedSqlNode 存在多种类型节点的树干节点(rootSqlNode)


